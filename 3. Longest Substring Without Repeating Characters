3. Longest Substring Without Repeating Characters

Given a string s, find the length of the longest substring without duplicate characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Solution:
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        char_index = {}
        left = 0
        max_len = 0

        for right, char in enumerate(s):
            print(f"right:{right} and char:{char}")
            if char in char_index and char_index[char] >= left:
                left = char_index[char] + 1
                print(f"Inside if loop - left : {left}")
            char_index[char] = right
            print(f"char_index:{char_index}")
            max_len = max(max_len, right - left + 1)
            print(f"max_len:{max_len}")
        return max_len
